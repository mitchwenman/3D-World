
varying vec3 halfVector;
varying vec3 outNormal;
varying vec4 vertPos;

void main()
{
	vec4 colour = vec4(0.0, 0.0, 0.0, 1.0);
	float shininess = gl_FrontMaterial.shininess;
	vec4 ambientColour = gl_FrontMaterial.ambient;
	vec4 ambientIntensity = gl_LightSource[0].ambient;
	vec4 I_ambient = ambientIntensity * ambientColour;
	colour += I_ambient;

	vec3 normal = normalize(outNormal);
	vec3 l = normalize(vec3(gl_LightSource[0].position - vertPos));
	float lambertian = max(dot(normal, l), 0.0);
	if (lambertian > 0.0)
	{
		vec4 diffuseIntensity = gl_LightSource[0].diffuse;
		vec4 diffuseColour = gl_FrontMaterial.diffuse;
		vec4 I_diffuse = diffuseColour;
		colour += I_diffuse;		

		vec3 view = normalize(-(vertPos.xyz));
		vec3 nHalfVector = normalize(l + view);
		float dotp = dot(normal, nHalfVector);
		float mantissa = max(dotp, 0);
		float specularIntensity = pow(mantissa, 16.0);

		vec4 I_specular = specularIntensity * ambientColour;
		colour += I_specular;
	}

	gl_FragColor = colour;	
	
	
	
}